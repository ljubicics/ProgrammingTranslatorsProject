package Parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import Lexer.MPLexer;
import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\006\000\002\002\004\000\002\002" +
    "\005\000\002\002\004\000\002\003\012\000\002\003\011" +
    "\000\002\003\010\000\002\003\007\000\002\003\005\000" +
    "\002\003\004\000\002\004\005\000\002\004\005\000\002" +
    "\006\004\000\002\006\003\000\002\007\007\000\002\007" +
    "\007\000\002\007\006\000\002\007\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\005\005\000" +
    "\002\005\005\000\002\011\004\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\015\005\000\002\015\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\016\011\000\002\016\006\000" +
    "\002\016\004\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\005\000\002\024\005\000\002\017\013\000\002\017\010" +
    "\000\002\017\006\000\002\017\004\000\002\025\005\000" +
    "\002\025\005\000\002\026\005\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\004\004\001\002\000\006\003\010\017" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\000" +
    "\001\002\000\006\003\012\020\011\001\002\000\004\002" +
    "\ufffe\001\002\000\004\021\014\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\006\003\015\005" +
    "\016\001\002\000\004\002\ufff8\001\002\000\006\003\017" +
    "\036\020\001\002\000\004\002\ufff9\001\002\000\004\021" +
    "\022\001\002\000\006\003\043\016\044\001\002\000\004" +
    "\040\025\001\002\000\010\003\041\022\040\040\025\001" +
    "\002\000\010\003\ufff4\022\ufff4\040\ufff4\001\002\000\006" +
    "\003\026\034\027\001\002\000\010\003\ufff0\022\ufff0\040" +
    "\ufff0\001\002\000\010\006\030\007\033\010\032\001\002" +
    "\000\006\003\uffed\035\uffed\001\002\000\006\003\034\035" +
    "\035\001\002\000\006\003\uffee\035\uffee\001\002\000\006" +
    "\003\uffef\035\uffef\001\002\000\010\003\ufff1\022\ufff1\040" +
    "\ufff1\001\002\000\006\003\036\037\037\001\002\000\010" +
    "\003\ufff2\022\ufff2\040\ufff2\001\002\000\010\003\ufff3\022" +
    "\ufff3\040\ufff3\001\002\000\006\003\ufff7\016\ufff7\001\002" +
    "\000\006\003\ufff6\016\ufff6\001\002\000\010\003\ufff5\022" +
    "\ufff5\040\ufff5\001\002\000\004\002\ufffa\001\002\000\006" +
    "\003\045\036\046\001\002\000\004\002\ufffb\001\002\000" +
    "\004\021\050\001\002\000\006\002\ufffc\022\167\001\002" +
    "\000\014\011\060\012\055\013\057\014\062\040\052\001" +
    "\002\000\020\003\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\022\uffe4\040\uffe4\001\002\000\006\003\150\035\151\001" +
    "\002\000\020\003\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\022\uffe9\040\uffe9\001\002\000\020\003\146\011\060\012" +
    "\055\013\057\014\062\022\147\040\052\001\002\000\006" +
    "\003\141\036\142\001\002\000\020\003\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\022\uffe7\040\uffe7\001\002\000\006" +
    "\003\125\017\124\001\002\000\006\003\120\036\121\001" +
    "\002\000\020\003\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\022\uffe5\040\uffe5\001\002\000\006\003\066\017\065\001" +
    "\002\000\020\003\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\022\uffe6\040\uffe6\001\002\000\020\003\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\022\uffe8\040\uffe8\001\002\000\016" +
    "\027\067\030\073\031\070\032\071\033\074\040\075\001" +
    "\002\000\020\003\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\022\uffc6\040\uffc6\001\002\000\010\003\uffd0\020\uffd0\037" +
    "\uffd0\001\002\000\010\003\uffcd\020\uffcd\037\uffcd\001\002" +
    "\000\010\003\uffcc\020\uffcc\037\uffcc\001\002\000\006\003" +
    "\115\020\114\001\002\000\010\003\uffcf\020\uffcf\037\uffcf" +
    "\001\002\000\010\003\uffce\020\uffce\037\uffce\001\002\000" +
    "\014\027\067\030\073\031\070\032\071\033\074\001\002" +
    "\000\004\037\077\001\002\000\004\020\100\001\002\000" +
    "\004\021\102\001\002\000\004\015\106\001\002\000\014" +
    "\011\060\012\055\013\057\014\062\040\052\001\002\000" +
    "\006\003\105\022\104\001\002\000\006\003\uffc5\015\uffc5" +
    "\001\002\000\006\003\uffc4\015\uffc4\001\002\000\004\021" +
    "\110\001\002\000\020\003\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\022\uffc9\040\uffc9\001\002\000\014\011\060\012" +
    "\055\013\057\014\062\040\052\001\002\000\006\003\113" +
    "\022\112\001\002\000\020\003\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\022\uffc3\040\uffc3\001\002\000\020\003\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\022\uffc2\040\uffc2\001" +
    "\002\000\004\021\102\001\002\000\020\003\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\022\uffc7\040\uffc7\001\002\000" +
    "\004\003\117\001\002\000\020\003\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\022\uffc8\040\uffc8\001\002\000\020\003" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\022\uffe1\040\uffe1" +
    "\001\002\000\006\003\122\040\123\001\002\000\020\003" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\022\uffe2\040\uffe2" +
    "\001\002\000\020\003\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\022\uffe3\040\uffe3\001\002\000\016\027\067\030\073" +
    "\031\070\032\071\033\074\040\127\001\002\000\020\003" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\022\uffd1\040\uffd1" +
    "\001\002\000\004\003\140\001\002\000\014\027\067\030" +
    "\073\031\070\032\071\033\074\001\002\000\004\037\131" +
    "\001\002\000\004\020\132\001\002\000\004\021\134\001" +
    "\002\000\020\003\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\022\uffd3\040\uffd3\001\002\000\014\011\060\012\055\013" +
    "\057\014\062\040\052\001\002\000\006\003\137\022\136" +
    "\001\002\000\020\003\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\022\uffcb\040\uffcb\001\002\000\020\003\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\022\uffca\040\uffca\001\002\000" +
    "\020\003\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\022\uffd2" +
    "\040\uffd2\001\002\000\020\003\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\022\uffde\040\uffde\001\002\000\006\003\143" +
    "\040\144\001\002\000\020\003\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\022\uffdf\040\uffdf\001\002\000\020\003\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\022\uffe0\040\uffe0\001" +
    "\002\000\020\003\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\022\uffea\040\uffea\001\002\000\006\002\uffeb\022\uffeb\001" +
    "\002\000\006\002\uffec\022\uffec\001\002\000\020\003\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\022\uffdc\040\uffdc\001" +
    "\002\000\006\037\153\040\156\001\002\000\024\003\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\022\uffdd\023\164\025" +
    "\163\040\uffdd\001\002\000\030\003\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\040\uffd4\001\002\000\030\003\uffd6\011\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\040\uffd6\001\002\000\030\003\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\022\uffd9\023\uffd9\024\160\025\uffd9\026" +
    "\157\040\uffd9\001\002\000\030\003\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\040\uffd5\001\002\000\006\037\153\040\156\001\002" +
    "\000\006\037\153\040\156\001\002\000\030\003\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\040\uffd8\001\002\000\030\003\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\040\uffd7\001\002\000\006\037\153\040" +
    "\156\001\002\000\006\037\153\040\156\001\002\000\030" +
    "\003\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\022\uffdb\023" +
    "\uffdb\024\160\025\uffdb\026\157\040\uffdb\001\002\000\030" +
    "\003\uffda\011\uffda\012\uffda\013\uffda\014\uffda\022\uffda\023" +
    "\uffda\024\160\025\uffda\026\157\040\uffda\001\002\000\004" +
    "\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\020\001\001\000" +
    "\002\001\001\000\006\006\022\007\023\001\001\000\004" +
    "\007\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\046\001\001\000\002\001\001\000\020\011" +
    "\053\012\052\013\063\014\055\015\062\016\060\017\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\144\013\063\014\055\015\062\016\060" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\100\001\001\000" +
    "\002\001\001\000\016\012\102\013\063\014\055\015\062" +
    "\016\060\017\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\106\001\001\000\002" +
    "\001\001\000\016\012\110\013\063\014\055\015\062\016" +
    "\060\017\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\132\001\001\000\002\001\001\000\016" +
    "\012\134\013\063\014\055\015\062\016\060\017\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\151\021\154\022\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\161\001\001\000\004\022\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\165\022" +
    "\153\001\001\000\006\021\164\022\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args)
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   parser parser = new parser( scanner );
		   parser.parse();
	  }
	  catch( Exception e )
	  {
          e.printStackTrace();
		   System.out.println(e);
	  }
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= main otvorenazagrada zatvorenazagrada MAINBLOK 
            {
              Object RESULT =null;
		
        System.out.println( "Redukcija po smeni 1.");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= main otvorenazagrada error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena zagrada nakon otvorene");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= main error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje otvorena zagrada nakon main");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAINBLOK ::= otvorenaviticasta var dvetacke PROMENLJIVEBLOK naredbe dvetacke NAREDBEBLOK zatvorenaviticasta 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 2");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAINBLOK ::= otvorenaviticasta var dvetacke PROMENLJIVEBLOK naredbe dvetacke NAREDBEBLOK 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena viticasta");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAINBLOK ::= otvorenaviticasta var dvetacke PROMENLJIVEBLOK naredbe error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaju dve tacke");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAINBLOK ::= otvorenaviticasta var dvetacke PROMENLJIVEBLOK error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaju naredbe");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAINBLOK ::= otvorenaviticasta var error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaju dve tacke");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAINBLOK ::= otvorenaviticasta error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje var promenljiva");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAINBLOK",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROMENLJIVEBLOK ::= otvorenaviticasta DEKPROMENLJIVIH zatvorenaviticasta 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 3");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROMENLJIVEBLOK",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROMENLJIVEBLOK ::= otvorenaviticasta DEKPROMENLJIVIH error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena viticasta");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROMENLJIVEBLOK",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEKPROMENLJIVIH ::= DEKPROMENLJIVIH PROMENLJIVA 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 4");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEKPROMENLJIVIH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DEKPROMENLJIVIH ::= PROMENLJIVA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 5");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEKPROMENLJIVIH",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PROMENLJIVA ::= id dodelatipa TIP dodela konstanta 
            {
              Object RESULT =null;
		
       System.out.println("Redukcija po smeni 6");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROMENLJIVA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PROMENLJIVA ::= id dodelatipa TIP dodela error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje default vrednost");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROMENLJIVA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PROMENLJIVA ::= id dodelatipa TIP error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje dodela");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROMENLJIVA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PROMENLJIVA ::= id error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje dodela tipa");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROMENLJIVA",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIP ::= intidzer 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 7");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIP ::= plivajuci 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 8");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIP ::= bool 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 9");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIP",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NAREDBEBLOK ::= otvorenaviticasta NIZNAREDBI zatvorenaviticasta 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 10");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBEBLOK",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NAREDBEBLOK ::= otvorenaviticasta NIZNAREDBI error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena viticasta");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBEBLOK",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NIZNAREDBI ::= NIZNAREDBI NAREDBA 
            {
              Object RESULT =null;
		
       System.out.println("Redukcija po smeni 11");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NIZNAREDBI",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NIZNAREDBI ::= NAREDBA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 12");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NIZNAREDBI",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NAREDBA ::= ULAZ 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 13");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NAREDBA ::= IZLAZ 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 14");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NAREDBA ::= DODELA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 15");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NAREDBA ::= WHILENAREDBA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 16");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NAREDBA ::= IFNAREDBA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 17");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NAREDBA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ULAZ ::= scanf dvetacke id 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 18");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ULAZ",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ULAZ ::= scanf dvetacke error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje id");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ULAZ",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ULAZ ::= scanf error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaju dve tacke");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ULAZ",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IZLAZ ::= printf dvetacke id 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 19");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IZLAZ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IZLAZ ::= printf dvetacke error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje id");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IZLAZ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IZLAZ ::= printf error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaju dve tacke");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IZLAZ",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DODELA ::= id dodela MATIZRAZ 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 20");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DODELA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DODELA ::= id error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje dodela");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DODELA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MATIZRAZ ::= MATIZRAZ plus CLAN 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 21");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATIZRAZ",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MATIZRAZ ::= MATIZRAZ minus CLAN 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 22");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATIZRAZ",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MATIZRAZ ::= CLAN 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 23");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MATIZRAZ",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CLAN ::= CLAN puta DEOCLANA 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 24");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CLAN ::= CLAN podeljeno DEOCLANA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 25");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CLAN ::= DEOCLANA 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 26");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEOCLANA ::= id 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 27");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEOCLANA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEOCLANA ::= konstanta 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 28");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEOCLANA",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILENAREDBA ::= dok otvorenazagrada id POREDJENJEIZRAZ konstanta zatvorenazagrada WHILEBLOK 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 29");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILENAREDBA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILENAREDBA ::= dok otvorenazagrada POREDJENJEIZRAZ error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena zagrada");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILENAREDBA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILENAREDBA ::= dok error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje otvorena zagrada");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILENAREDBA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // POREDJENJEIZRAZ ::= manje 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 30");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POREDJENJEIZRAZ",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // POREDJENJEIZRAZ ::= vece 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 31");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POREDJENJEIZRAZ",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // POREDJENJEIZRAZ ::= jednako 
            {
              Object RESULT =null;
		
             System.out.println("Redukcija po smeni 32");
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POREDJENJEIZRAZ",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // POREDJENJEIZRAZ ::= manjejednako 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 33");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POREDJENJEIZRAZ",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // POREDJENJEIZRAZ ::= vecejednako 
            {
              Object RESULT =null;
		
            System.out.println("Redukcija po smeni 34");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POREDJENJEIZRAZ",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WHILEBLOK ::= otvorenaviticasta NAREDBA zatvorenaviticasta 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 35");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILEBLOK",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WHILEBLOK ::= otvorenaviticasta NAREDBA error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje otvorena zagrada");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILEBLOK",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IFNAREDBA ::= ifkrec otvorenazagrada id POREDJENJEIZRAZ konstanta zatvorenazagrada TRUEBLOK elsekrec FALSEBLOK 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 36");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFNAREDBA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFNAREDBA ::= ifkrec otvorenazagrada POREDJENJEIZRAZ zatvorenazagrada TRUEBLOK error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje kljucna rec else");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFNAREDBA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFNAREDBA ::= ifkrec otvorenazagrada POREDJENJEIZRAZ error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena zagrada");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFNAREDBA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFNAREDBA ::= ifkrec error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje otvorena zagrada");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IFNAREDBA",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TRUEBLOK ::= otvorenaviticasta NAREDBA zatvorenaviticasta 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 37");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRUEBLOK",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TRUEBLOK ::= otvorenaviticasta NAREDBA error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena viticasta zagrada");
            System.out.close();
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRUEBLOK",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FALSEBLOK ::= otvorenaviticasta NAREDBA zatvorenaviticasta 
            {
              Object RESULT =null;
		
        System.out.println("Redukcija po smeni 38");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FALSEBLOK",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FALSEBLOK ::= otvorenaviticasta NAREDBA error 
            {
              Object RESULT =null;
		
            System.out.println( "Nedostaje zatvorena viticasta zagrada");
            System.out.close();
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FALSEBLOK",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
