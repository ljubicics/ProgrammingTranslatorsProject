package Lexer;// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/Fakultet/Semestri/5. Semestar/Programski prevodioci/Projekat/src/main/java/Lexer/MPLexer.flex

// import section
import java_cup.runtime.Scanner;
import java_cup.runtime.Symbol;
import Parser.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public
class MPLexer implements Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\1\7\0\1\3"+
    "\1\4\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\11\13\1\14\1\0\1\15\1\16\1\17\2\0\4\20"+
    "\1\21\25\20\4\0\1\20\1\0\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\20\1\30\1\31\2\20\1\32"+
    "\1\33\1\34\1\35\1\36\1\20\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\3\20\1\45\1\0\1\46\7\0"+
    "\1\1\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0"+
    "\u0100\47";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\2\11\1\12\1\13\1\14\1\15\14\16\1\17"+
    "\1\20\1\1\1\2\1\21\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\15\14\16"+
    "\1\17\1\20\1\0\1\22\1\0\1\23\1\24\1\25"+
    "\1\26\4\16\1\27\10\16\1\22\1\0\1\23\1\24"+
    "\1\25\1\26\4\16\1\27\10\16\1\11\4\16\1\30"+
    "\5\16\1\31\1\16\1\11\4\16\1\30\5\16\1\31"+
    "\1\16\1\0\1\32\1\33\1\16\1\34\3\16\1\11"+
    "\1\16\1\0\1\32\1\33\1\16\1\34\3\16\1\11"+
    "\1\16\1\0\1\35\2\16\1\36\1\37\1\0\1\35"+
    "\2\16\1\36\1\37\1\16\1\40\1\16\1\40\2\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\120\0\120\0\120\0\120\0\120"+
    "\0\120\0\170\0\240\0\310\0\360\0\u0118\0\120\0\u0140"+
    "\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258\0\u0280"+
    "\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\120\0\120\0\u0348\0\u0348"+
    "\0\120\0\u0348\0\u0348\0\u0348\0\u0348\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0348\0\u0438\0\u0460\0\u0488\0\u04b0"+
    "\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0"+
    "\0\u0618\0\u0348\0\u0348\0\u0348\0\120\0\u0640\0\120\0\120"+
    "\0\120\0\120\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0168\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0348"+
    "\0\u0848\0\u0348\0\u0348\0\u0348\0\u0348\0\u0870\0\u0898\0\u08c0"+
    "\0\u08e8\0\u0460\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0168"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0168\0\u0be0\0\u0c08"+
    "\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0460\0\u0cd0\0\u0cf8\0\u0d20"+
    "\0\u0d48\0\u0d70\0\u0460\0\u0d98\0\u0dc0\0\u0168\0\u0168\0\u0de8"+
    "\0\u0168\0\u0e10\0\u0e38\0\u0e60\0\u0168\0\u0e88\0\u0eb0\0\u0460"+
    "\0\u0460\0\u0ed8\0\u0460\0\u0f00\0\u0f28\0\u0f50\0\u0460\0\u0f78"+
    "\0\310\0\u0168\0\u0fa0\0\u0fc8\0\u0168\0\u0168\0\u03c0\0\u0460"+
    "\0\u0ff0\0\u1018\0\u0460\0\u0460\0\u1040\0\u0168\0\u1068\0\u0460"+
    "\0\u0168\0\u0460";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\3\21"+
    "\1\22\2\21\1\23\1\24\1\21\1\25\1\21\1\26"+
    "\1\27\1\21\1\30\1\21\1\31\1\32\1\21\1\33"+
    "\1\34\1\35\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\37\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\3\56\1\57\2\56\1\60"+
    "\1\61\1\56\1\62\1\56\1\63\1\64\1\56\1\65"+
    "\1\56\1\66\1\67\1\56\1\70\1\71\1\72\1\73"+
    "\1\74\61\0\1\75\46\0\1\76\1\0\2\14\46\0"+
    "\2\14\52\0\1\77\40\0\1\100\6\0\1\101\47\0"+
    "\1\102\43\0\2\21\4\0\25\21\15\0\2\21\4\0"+
    "\15\21\1\103\7\21\15\0\2\21\4\0\12\21\1\104"+
    "\12\21\15\0\2\21\4\0\2\21\1\105\7\21\1\106"+
    "\12\21\15\0\2\21\4\0\7\21\1\107\4\21\1\110"+
    "\10\21\15\0\2\21\4\0\2\21\1\111\22\21\15\0"+
    "\2\21\4\0\2\21\1\112\22\21\15\0\2\21\4\0"+
    "\17\21\1\113\5\21\15\0\2\21\4\0\4\21\1\114"+
    "\20\21\15\0\2\21\4\0\17\21\1\115\5\21\15\0"+
    "\2\21\4\0\2\21\1\116\22\21\15\0\2\21\4\0"+
    "\10\21\1\117\14\21\3\0\2\74\1\41\47\74\1\41"+
    "\6\74\1\120\40\74\1\41\5\74\1\121\1\74\2\51"+
    "\36\74\1\41\7\74\2\51\36\74\1\41\13\74\1\122"+
    "\33\74\1\41\4\74\1\123\6\74\1\124\33\74\1\41"+
    "\13\74\1\125\33\74\1\41\7\74\2\56\4\74\25\56"+
    "\5\74\1\41\7\74\2\56\4\74\15\56\1\126\7\56"+
    "\5\74\1\41\7\74\2\56\4\74\12\56\1\127\12\56"+
    "\5\74\1\41\7\74\2\56\4\74\2\56\1\130\7\56"+
    "\1\131\12\56\5\74\1\41\7\74\2\56\4\74\7\56"+
    "\1\132\4\56\1\133\10\56\5\74\1\41\7\74\2\56"+
    "\4\74\2\56\1\134\22\56\5\74\1\41\7\74\2\56"+
    "\4\74\2\56\1\135\22\56\5\74\1\41\7\74\2\56"+
    "\4\74\17\56\1\136\5\56\5\74\1\41\7\74\2\56"+
    "\4\74\4\56\1\137\20\56\5\74\1\41\7\74\2\56"+
    "\4\74\17\56\1\140\5\56\5\74\1\41\7\74\2\56"+
    "\4\74\2\56\1\141\22\56\5\74\1\41\7\74\2\56"+
    "\4\74\10\56\1\142\14\56\3\74\12\0\2\143\46\0"+
    "\2\21\4\0\15\21\1\144\7\21\15\0\2\21\4\0"+
    "\20\21\1\145\4\21\15\0\2\21\4\0\12\21\1\146"+
    "\12\21\15\0\2\21\4\0\15\21\1\147\7\21\15\0"+
    "\2\21\4\0\21\21\1\150\3\21\15\0\2\21\4\0"+
    "\11\21\1\151\13\21\15\0\2\21\4\0\17\21\1\152"+
    "\5\21\15\0\2\21\4\0\11\21\1\153\13\21\15\0"+
    "\2\21\4\0\2\21\1\154\22\21\15\0\2\21\4\0"+
    "\22\21\1\155\2\21\15\0\2\21\4\0\17\21\1\156"+
    "\5\21\15\0\2\21\4\0\11\21\1\157\13\21\3\0"+
    "\2\74\1\41\7\74\2\160\36\74\1\41\7\74\2\56"+
    "\4\74\15\56\1\161\7\56\5\74\1\41\7\74\2\56"+
    "\4\74\20\56\1\162\4\56\5\74\1\41\7\74\2\56"+
    "\4\74\12\56\1\163\12\56\5\74\1\41\7\74\2\56"+
    "\4\74\15\56\1\164\7\56\5\74\1\41\7\74\2\56"+
    "\4\74\21\56\1\165\3\56\5\74\1\41\7\74\2\56"+
    "\4\74\11\56\1\166\13\56\5\74\1\41\7\74\2\56"+
    "\4\74\17\56\1\167\5\56\5\74\1\41\7\74\2\56"+
    "\4\74\11\56\1\170\13\56\5\74\1\41\7\74\2\56"+
    "\4\74\2\56\1\171\22\56\5\74\1\41\7\74\2\56"+
    "\4\74\22\56\1\172\2\56\5\74\1\41\7\74\2\56"+
    "\4\74\17\56\1\173\5\56\5\74\1\41\7\74\2\56"+
    "\4\74\11\56\1\174\13\56\3\74\12\0\2\143\5\0"+
    "\1\175\40\0\2\21\4\0\12\21\1\176\12\21\15\0"+
    "\2\21\4\0\6\21\1\177\16\21\15\0\2\21\4\0"+
    "\20\21\1\155\4\21\15\0\2\21\4\0\2\21\1\200"+
    "\22\21\15\0\2\21\4\0\14\21\1\201\10\21\15\0"+
    "\2\21\4\0\6\21\1\202\16\21\15\0\2\21\4\0"+
    "\14\21\1\203\10\21\15\0\2\21\4\0\14\21\1\204"+
    "\10\21\15\0\2\21\4\0\6\21\1\205\16\21\15\0"+
    "\2\21\4\0\12\21\1\206\12\21\3\0\2\74\1\41"+
    "\7\74\2\160\5\74\1\207\30\74\1\41\7\74\2\56"+
    "\4\74\12\56\1\210\12\56\5\74\1\41\7\74\2\56"+
    "\4\74\6\56\1\211\16\56\5\74\1\41\7\74\2\56"+
    "\4\74\20\56\1\172\4\56\5\74\1\41\7\74\2\56"+
    "\4\74\2\56\1\212\22\56\5\74\1\41\7\74\2\56"+
    "\4\74\14\56\1\213\10\56\5\74\1\41\7\74\2\56"+
    "\4\74\6\56\1\214\16\56\5\74\1\41\7\74\2\56"+
    "\4\74\14\56\1\215\10\56\5\74\1\41\7\74\2\56"+
    "\4\74\14\56\1\216\10\56\5\74\1\41\7\74\2\56"+
    "\4\74\6\56\1\217\16\56\5\74\1\41\7\74\2\56"+
    "\4\74\12\56\1\220\12\56\3\74\6\0\2\221\52\0"+
    "\2\21\4\0\21\21\1\222\3\21\15\0\2\21\4\0"+
    "\5\21\1\223\17\21\15\0\2\21\4\0\21\21\1\224"+
    "\3\21\15\0\2\21\4\0\7\21\1\225\15\21\15\0"+
    "\2\21\4\0\6\21\1\226\16\21\3\0\2\74\1\41"+
    "\3\74\2\227\42\74\1\41\7\74\2\56\4\74\21\56"+
    "\1\230\3\56\5\74\1\41\7\74\2\56\4\74\5\56"+
    "\1\231\17\56\5\74\1\41\7\74\2\56\4\74\21\56"+
    "\1\232\3\56\5\74\1\41\7\74\2\56\4\74\7\56"+
    "\1\233\15\56\5\74\1\41\7\74\2\56\4\74\6\56"+
    "\1\234\16\56\3\74\12\0\2\21\4\0\3\21\1\235"+
    "\21\21\15\0\2\21\4\0\7\21\1\236\15\21\3\0"+
    "\2\74\1\41\7\74\2\56\4\74\3\56\1\237\21\56"+
    "\5\74\1\41\7\74\2\56\4\74\7\56\1\240\15\56"+
    "\3\74\12\0\2\21\4\0\6\21\1\241\16\21\3\0"+
    "\2\74\1\41\7\74\2\56\4\74\6\56\1\242\16\56"+
    "\3\74";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\7\11\5\1\1\11\15\1\2\11\2\1\1\11"+
    "\32\1\1\0\1\11\1\0\4\11\16\1\1\0\53\1"+
    "\1\0\11\1\1\0\11\1\1\0\5\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MPLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }
  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { if (yytext() != null && yytext().length() > 0) System.out.println( \"ERROR: \" + yytext() ); }");
            { if (yytext() != null && yytext().length() > 0) System.out.println( "ERROR: " + yytext() );
            }
            // fall through
          case 34: break;
          case 2:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [29] { ; }");
            { ;
            }
            // fall through
          case 35: break;
          case 3:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [30] { return new Symbol( sym.otvorenazagrada); }");
            { return new Symbol( sym.otvorenazagrada);
            }
            // fall through
          case 36: break;
          case 4:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [31] { return new Symbol( sym.zatvorenazagrada); }");
            { return new Symbol( sym.zatvorenazagrada);
            }
            // fall through
          case 37: break;
          case 5:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [37] { return new Symbol( sym.puta); }");
            { return new Symbol( sym.puta);
            }
            // fall through
          case 38: break;
          case 6:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [36] { return new Symbol( sym.plus); }");
            { return new Symbol( sym.plus);
            }
            // fall through
          case 39: break;
          case 7:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [38] { return new Symbol( sym.minus); }");
            { return new Symbol( sym.minus);
            }
            // fall through
          case 40: break;
          case 8:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [39] { return new Symbol( sym.podeljeno); }");
            { return new Symbol( sym.podeljeno);
            }
            // fall through
          case 41: break;
          case 9:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return new Symbol( sym.konstanta); }");
            { return new Symbol( sym.konstanta);
            }
            // fall through
          case 42: break;
          case 10:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [51] { return new Symbol( sym.dvetacke); }");
            { return new Symbol( sym.dvetacke);
            }
            // fall through
          case 43: break;
          case 11:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [40] { return new Symbol( sym.manje); }");
            { return new Symbol( sym.manje);
            }
            // fall through
          case 44: break;
          case 12:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [48] { return new Symbol( sym.jednako); }");
            { return new Symbol( sym.jednako);
            }
            // fall through
          case 45: break;
          case 13:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [41] { return new Symbol( sym.vece); }");
            { return new Symbol( sym.vece);
            }
            // fall through
          case 46: break;
          case 14:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [70] { return new Symbol(sym.id); }");
            { return new Symbol(sym.id);
            }
            // fall through
          case 47: break;
          case 15:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [32] { return new Symbol( sym.otvorenaviticasta); }");
            { return new Symbol( sym.otvorenaviticasta);
            }
            // fall through
          case 48: break;
          case 16:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [33] { return new Symbol( sym.zatvorenaviticasta); }");
            { return new Symbol( sym.zatvorenaviticasta);
            }
            // fall through
          case 49: break;
          case 17:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [26] { yybegin( YYINITIAL ); }");
            { yybegin( YYINITIAL );
            }
            // fall through
          case 50: break;
          case 18:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [25] { yybegin( COMMENT ); }");
            { yybegin( COMMENT );
            }
            // fall through
          case 51: break;
          case 19:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [50] { return new Symbol( sym.dodela); }");
            { return new Symbol( sym.dodela);
            }
            // fall through
          case 52: break;
          case 20:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [49] { return new Symbol( sym.dodelatipa); }");
            { return new Symbol( sym.dodelatipa);
            }
            // fall through
          case 53: break;
          case 21:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [42] { return new Symbol( sym.manjejednako); }");
            { return new Symbol( sym.manjejednako);
            }
            // fall through
          case 54: break;
          case 22:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [43] { return new Symbol( sym.vecejednako); }");
            { return new Symbol( sym.vecejednako);
            }
            // fall through
          case 55: break;
          case 23:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [63] { return new Symbol(sym.ifkrec); }");
            { return new Symbol(sym.ifkrec);
            }
            // fall through
          case 56: break;
          case 24:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [58] { return new Symbol(sym.intidzer); }");
            { return new Symbol(sym.intidzer);
            }
            // fall through
          case 57: break;
          case 25:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [56] { return new Symbol(sym.var); }");
            { return new Symbol(sym.var);
            }
            // fall through
          case 58: break;
          case 26:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [57] { return new Symbol(sym.bool); }");
            { return new Symbol(sym.bool);
            }
            // fall through
          case 59: break;
          case 27:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [64] { return new Symbol(sym.elsekrec); }");
            { return new Symbol(sym.elsekrec);
            }
            // fall through
          case 60: break;
          case 28:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [55] { return new Symbol(sym.main); }");
            { return new Symbol(sym.main);
            }
            // fall through
          case 61: break;
          case 29:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [59] { return new Symbol(sym.plivajuci); }");
            { return new Symbol(sym.plivajuci);
            }
            // fall through
          case 62: break;
          case 30:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [60] { return new Symbol(sym.scanf); }");
            { return new Symbol(sym.scanf);
            }
            // fall through
          case 63: break;
          case 31:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [62] { return new Symbol(sym.dok); }");
            { return new Symbol(sym.dok);
            }
            // fall through
          case 64: break;
          case 32:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [61] { return new Symbol(sym.printf); }");
            { return new Symbol(sym.printf);
            }
            // fall through
          case 65: break;
          case 33:
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] { return new Symbol(sym.naredbe); }");
            { return new Symbol(sym.naredbe);
            }
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java MPLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MPLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MPLexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
